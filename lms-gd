#!/bin/bash

VERSION="0.2"

template=${LMS_GD_TEMPLATE:-"/usr/share/lms-gd"}

music_dir=${LMS_GD_MUSIC:-"/mnt/music"}
image_name=${LMS_GD_IMAGE:-"gentoo/lms:latest"}
container_name=${LMS_GD_CONTAINER:-"lms"}

bridge_name=${LMS_GD_BRIDGE:-"br0"}
ip_address=${LMS_GD_IP}

overlay="git://anongit.gentoo.org/user/squeezebox.git"

PORT_FORWARDS="
 -p 3483:3483
 -p 3483:3483/udp
 -p 9000:9000
 -p 9090:9090
"

get_overlay()
{
    git clone "${overlay}"
    # only needed until support is added for bind mounting during RUN's
    (   # remove: RESTRICT="bindist mirror"
	cd squeezebox/media-sound/logitechmediaserver-bin
	for file in $(grep -l RESTRICT *.ebuild) ; do
	    [ -f "$file" ] && sed -i '/RESTRICT/d' "$file"
	done
	ebuild $file manifest
    )
}

get_lms_config()
{
    if [ -d "/etc/logitechmediaserver" ] ; then
	echo "Copying /etc/logitechmediaserver to ${PWD}"
	# this will fail unless the user has read rights on /etc/logitechmediaserver
	cp -upvr /etc/logitechmediaserver .
	sed -i '/^mediadirs:/{n;s:.*:- /mnt/media:}' logitechmediaserver/server.prefs
    else
	echo "/etc/logitechmediaserver not found - manually copy in a settings directory if needed."
    fi
}

case "$1" in
    init)  # create a context for the container build
	[ ! -f "Dockerfile" ]          && cp -upv ${template}/{Dockerfile,lms.keywords,lms.use,make.conf.lms-gd,squeezebox.conf} .
	[ ! -d "squeezebox" ]          && get_overlay
	[ ! -d "logitechmediaserver" ] && get_lms_config  # try and find an existing lms config directory
	;;
    build)
	exec docker build --tag "${2:-$image_name}" .
	;;
    create-nf|create-no-forwards|cnf)
	PORT_FORWARDS=""
	;&
    create)
	exec docker create \
	     $PORT_FORWARDS \
	     -v "${2:-$music_dir}:/mnt/music" \
	     --name "${4:-$container_name}" \
	     "${3:-$image_name}"
	;;
    start)
	exec docker start "${2:-$container_name}"
	;;
    stop)
	exec docker stop "${2:-$container_name}"
	;;
    restart)
	$0 stop "$2"
	$0 start "$2"
	;;
    shell|sh)
	exec docker exec -it "${2:-$container_name}" bash -l
	;;
    status)
	exec docker ps -a
	;;
    backup)
	docker exec "${2:-$container_name}" tar -cf - /etc/logitechmediaserver >"lms-gd-etc-logitechmediaserver-$(date +%F-%H-%M-%S).tar"
	;;
    bridge)
	docker-link start "${2:-$container_name}" "${3:-$ip_address}" "${4-$bridge_name}"
	#iptables -P FORWARD ACCEPT
	;;
    version|--version)
	echo $VERSION
	;;
    *)
        echo "Usage: $(basename $0) {init|create|start|stop|restart|shell|status|backup|version}"
	echo ""
	echo "       $(basename $0) init"
	echo "       $(basename $0) build [<image_name>]"
	echo "       $(basename $0) create [<music_dir> <image_name> <container_name>]"
	echo "       $(basename $0) start [<container_name>]"
	echo "       $(basename $0) stop [<container_name>]"
	echo "       $(basename $0) restart [<container_name>]"
	echo "       $(basename $0) shell [<container_name>]"
	echo "       $(basename $0) status"
	echo "       $(basename $0) backup [<container_name>]"
	echo "       $(basename $0) bridge [<container_name> <ip_address> <bridge_name>]"
	echo "       $(basename $0) version"
	echo ""
	echo "Settings:"
	echo ""
	echo "  music_dir=$music_dir (music location on host)"
	echo "  image_name=$image_name (un-runnable immutable base for container)"
	echo "  container_name=$container_name (runnable instance of the image)"
        exit 1
esac

exit 0

